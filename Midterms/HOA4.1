{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/eryyyj/Machine_Learning/blob/main/Midterms/HOA4.1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U_oy4HhR0yBU"
      },
      "source": [
        "# Activity 3.3 K Nearest Neighbors"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MQAZ8MPp0yBV"
      },
      "source": [
        "Objective(s):\n",
        "\n",
        "This activity aims to perform classification using K Nearest Neighbors"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ipEYAmfX0yBV"
      },
      "source": [
        "Intended Learning Outcomes (ILOs):\n",
        "* Build the model using K Nearest Neighbors.\n",
        "* Evaluate the performance of the model.\n",
        "* Choose the best k-value.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fEGj3Ktp0yBV"
      },
      "source": [
        "Resources:\n",
        "* Jupyter Notebook\n",
        "* Classified data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z6D2xx6W0yBV"
      },
      "source": [
        "Procedure:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S4wzVsfQ0yBV"
      },
      "source": [
        "Import the libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5szdHikr0yBW"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TTkwM5bY0yBW"
      },
      "source": [
        "Load the data. Set index_col=0 to use the first column as the index."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mRuADHBh002r",
        "outputId": "cc2d0983-034f-4325-98cf-1aaf1a6b827c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Dg_XFjOP0yBW"
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv(\"/content/drive/MyDrive/DATASETS/Classified Data.csv\",index_col=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "1rb7w9R30yBW",
        "outputId": "ca6a71a9-451a-4475-e21b-e9c479444dea"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        WTT       PTI       EQW       SBI       LQE       QWG       FDJ  \\\n",
              "0  0.913917  1.162073  0.567946  0.755464  0.780862  0.352608  0.759697   \n",
              "1  0.635632  1.003722  0.535342  0.825645  0.924109  0.648450  0.675334   \n",
              "2  0.721360  1.201493  0.921990  0.855595  1.526629  0.720781  1.626351   \n",
              "3  1.234204  1.386726  0.653046  0.825624  1.142504  0.875128  1.409708   \n",
              "4  1.279491  0.949750  0.627280  0.668976  1.232537  0.703727  1.115596   \n",
              "\n",
              "        PJF       HQE       NXJ  TARGET CLASS  \n",
              "0  0.643798  0.879422  1.231409             1  \n",
              "1  1.013546  0.621552  1.492702             0  \n",
              "2  1.154483  0.957877  1.285597             0  \n",
              "3  1.380003  1.522692  1.153093             1  \n",
              "4  0.646691  1.463812  1.419167             1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0b456fda-cc8b-4a8d-8f8a-18a377ccdda8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>WTT</th>\n",
              "      <th>PTI</th>\n",
              "      <th>EQW</th>\n",
              "      <th>SBI</th>\n",
              "      <th>LQE</th>\n",
              "      <th>QWG</th>\n",
              "      <th>FDJ</th>\n",
              "      <th>PJF</th>\n",
              "      <th>HQE</th>\n",
              "      <th>NXJ</th>\n",
              "      <th>TARGET CLASS</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.913917</td>\n",
              "      <td>1.162073</td>\n",
              "      <td>0.567946</td>\n",
              "      <td>0.755464</td>\n",
              "      <td>0.780862</td>\n",
              "      <td>0.352608</td>\n",
              "      <td>0.759697</td>\n",
              "      <td>0.643798</td>\n",
              "      <td>0.879422</td>\n",
              "      <td>1.231409</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.635632</td>\n",
              "      <td>1.003722</td>\n",
              "      <td>0.535342</td>\n",
              "      <td>0.825645</td>\n",
              "      <td>0.924109</td>\n",
              "      <td>0.648450</td>\n",
              "      <td>0.675334</td>\n",
              "      <td>1.013546</td>\n",
              "      <td>0.621552</td>\n",
              "      <td>1.492702</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.721360</td>\n",
              "      <td>1.201493</td>\n",
              "      <td>0.921990</td>\n",
              "      <td>0.855595</td>\n",
              "      <td>1.526629</td>\n",
              "      <td>0.720781</td>\n",
              "      <td>1.626351</td>\n",
              "      <td>1.154483</td>\n",
              "      <td>0.957877</td>\n",
              "      <td>1.285597</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.234204</td>\n",
              "      <td>1.386726</td>\n",
              "      <td>0.653046</td>\n",
              "      <td>0.825624</td>\n",
              "      <td>1.142504</td>\n",
              "      <td>0.875128</td>\n",
              "      <td>1.409708</td>\n",
              "      <td>1.380003</td>\n",
              "      <td>1.522692</td>\n",
              "      <td>1.153093</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.279491</td>\n",
              "      <td>0.949750</td>\n",
              "      <td>0.627280</td>\n",
              "      <td>0.668976</td>\n",
              "      <td>1.232537</td>\n",
              "      <td>0.703727</td>\n",
              "      <td>1.115596</td>\n",
              "      <td>0.646691</td>\n",
              "      <td>1.463812</td>\n",
              "      <td>1.419167</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b456fda-cc8b-4a8d-8f8a-18a377ccdda8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0b456fda-cc8b-4a8d-8f8a-18a377ccdda8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0b456fda-cc8b-4a8d-8f8a-18a377ccdda8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-081c96ce-2eb2-4df8-a692-62a46cd642ec\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-081c96ce-2eb2-4df8-a692-62a46cd642ec')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-081c96ce-2eb2-4df8-a692-62a46cd642ec button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"WTT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2896352516575889,\n        \"min\": 0.174411668391638,\n        \"max\": 1.721779168965468,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          0.7063010303254464,\n          1.3496574995895918,\n          1.3169005830819778\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PTI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2570852621379548,\n        \"min\": 0.441398100295989,\n        \"max\": 1.8337565522536252,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          1.521177618895161,\n          1.2203336025956588,\n          1.1486493499359351\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EQW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29155385034441145,\n        \"min\": 0.1709236280526556,\n        \"max\": 1.7227247553711322,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          1.130807438901416,\n          0.7058621252266584,\n          1.0433060732882415\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SBI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.229645024161446,\n        \"min\": 0.0450266664094166,\n        \"max\": 1.634884045436437,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          0.4034386350051173,\n          0.8143574265988366,\n          0.9019193027640824\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LQE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24341295346925404,\n        \"min\": 0.3153070077960995,\n        \"max\": 1.650049589008639,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          0.8967456416302068,\n          0.6699170570739925,\n          0.9443602753750552\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"QWG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.256120596610873,\n        \"min\": 0.2623888468883443,\n        \"max\": 1.6669023520657231,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          0.9158571059683956,\n          0.6719997779429592,\n          1.1087710280109884\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FDJ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.25511802913126275,\n        \"min\": 0.2952280855806717,\n        \"max\": 1.7133422293242386,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          1.0701452103715168,\n          0.7467547171292814,\n          0.3132418138897407\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PJF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.288981643277679,\n        \"min\": 0.299475657020008,\n        \"max\": 1.7854196250383634,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          1.2150324734826512,\n          0.5407172165654959,\n          0.8107025990833856\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HQE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29373751661647246,\n        \"min\": 0.3651566098613977,\n        \"max\": 1.8856900849797629,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          1.0385048132735202,\n          1.4319928464192602,\n          1.0343550687529062\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NXJ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20422502341003687,\n        \"min\": 0.639692747423801,\n        \"max\": 1.8939496030653464,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          1.4457974108545717,\n          1.173152878750532,\n          1.5851535299635755\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TARGET CLASS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u6nkD84X0yBX"
      },
      "source": [
        "\n",
        "Because the KNN classifier predicts the class of a given test observation by identifying the observations that are nearest to it, the scale of the variables matters. Any variables that are on a large scale will have a much larger effect on the distance between the observations, and hence on the KNN classifier, than variables that are on a small scale."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Bbf8qmME0yBX"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import StandardScaler"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YnBAD3WS0yBX"
      },
      "outputs": [],
      "source": [
        "scaler = StandardScaler()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "RapU69N00yBX",
        "outputId": "ce26f29f-59b7-4b08-bc9e-caa8b17f8d8c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "StandardScaler()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>StandardScaler()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "scaler.fit(df.drop('TARGET CLASS',axis=1))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qCY6Y-xW0yBX"
      },
      "outputs": [],
      "source": [
        "scaled_features = scaler.transform(df.drop('TARGET CLASS',axis=1))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "5mFV0ytI0yBX",
        "outputId": "0d3f9aa1-f5a0-4204-eab4-b045c27cded1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        WTT       PTI       EQW       SBI       LQE       QWG       FDJ  \\\n",
              "0 -0.123542  0.185907 -0.913431  0.319629 -1.033637 -2.308375 -0.798951   \n",
              "1 -1.084836 -0.430348 -1.025313  0.625388 -0.444847 -1.152706 -1.129797   \n",
              "2 -0.788702  0.339318  0.301511  0.755873  2.031693 -0.870156  2.599818   \n",
              "3  0.982841  1.060193 -0.621399  0.625299  0.452820 -0.267220  1.750208   \n",
              "4  1.139275 -0.640392 -0.709819 -0.057175  0.822886 -0.936773  0.596782   \n",
              "\n",
              "        PJF       HQE       NXJ  \n",
              "0 -1.482368 -0.949719 -0.643314  \n",
              "1 -0.202240 -1.828051  0.636759  \n",
              "2  0.285707 -0.682494 -0.377850  \n",
              "3  1.066491  1.241325 -1.026987  \n",
              "4 -1.472352  1.040772  0.276510  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b80ba36a-e091-4a8f-bbce-8740dbe709c1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>WTT</th>\n",
              "      <th>PTI</th>\n",
              "      <th>EQW</th>\n",
              "      <th>SBI</th>\n",
              "      <th>LQE</th>\n",
              "      <th>QWG</th>\n",
              "      <th>FDJ</th>\n",
              "      <th>PJF</th>\n",
              "      <th>HQE</th>\n",
              "      <th>NXJ</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.123542</td>\n",
              "      <td>0.185907</td>\n",
              "      <td>-0.913431</td>\n",
              "      <td>0.319629</td>\n",
              "      <td>-1.033637</td>\n",
              "      <td>-2.308375</td>\n",
              "      <td>-0.798951</td>\n",
              "      <td>-1.482368</td>\n",
              "      <td>-0.949719</td>\n",
              "      <td>-0.643314</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-1.084836</td>\n",
              "      <td>-0.430348</td>\n",
              "      <td>-1.025313</td>\n",
              "      <td>0.625388</td>\n",
              "      <td>-0.444847</td>\n",
              "      <td>-1.152706</td>\n",
              "      <td>-1.129797</td>\n",
              "      <td>-0.202240</td>\n",
              "      <td>-1.828051</td>\n",
              "      <td>0.636759</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.788702</td>\n",
              "      <td>0.339318</td>\n",
              "      <td>0.301511</td>\n",
              "      <td>0.755873</td>\n",
              "      <td>2.031693</td>\n",
              "      <td>-0.870156</td>\n",
              "      <td>2.599818</td>\n",
              "      <td>0.285707</td>\n",
              "      <td>-0.682494</td>\n",
              "      <td>-0.377850</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.982841</td>\n",
              "      <td>1.060193</td>\n",
              "      <td>-0.621399</td>\n",
              "      <td>0.625299</td>\n",
              "      <td>0.452820</td>\n",
              "      <td>-0.267220</td>\n",
              "      <td>1.750208</td>\n",
              "      <td>1.066491</td>\n",
              "      <td>1.241325</td>\n",
              "      <td>-1.026987</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.139275</td>\n",
              "      <td>-0.640392</td>\n",
              "      <td>-0.709819</td>\n",
              "      <td>-0.057175</td>\n",
              "      <td>0.822886</td>\n",
              "      <td>-0.936773</td>\n",
              "      <td>0.596782</td>\n",
              "      <td>-1.472352</td>\n",
              "      <td>1.040772</td>\n",
              "      <td>0.276510</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b80ba36a-e091-4a8f-bbce-8740dbe709c1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b80ba36a-e091-4a8f-bbce-8740dbe709c1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b80ba36a-e091-4a8f-bbce-8740dbe709c1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4d8af88d-5f40-4140-93bb-4f9adcc6315c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4d8af88d-5f40-4140-93bb-4f9adcc6315c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4d8af88d-5f40-4140-93bb-4f9adcc6315c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_feat",
              "summary": "{\n  \"name\": \"df_feat\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"WTT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0005003753127737,\n        \"min\": -2.678050294892763,\n        \"max\": 2.667092453480776,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          -0.8407204008480645,\n          1.3816554504162177,\n          1.2685017266467709\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PTI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0005003753127737,\n        \"min\": -2.6187465594530646,\n        \"max\": 2.799903822014538,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          1.5834383679497588,\n          0.41264176640541583,\n          0.13366769728284045\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EQW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0005003753127737,\n        \"min\": -2.2758578511888814,\n        \"max\": 3.049325158601135,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          1.0180932040839803,\n          -0.4401552303536436,\n          0.7178222625994329\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SBI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0005003753127744,\n        \"min\": -2.775551017934635,\n        \"max\": 4.151021461563324,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          -1.2140483883610458,\n          0.576212065632318,\n          0.9576951405925229\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LQE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0005003753127744,\n        \"min\": -2.947205948503044,\n        \"max\": 2.538987100864661,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          -0.5573184627252994,\n          -1.4896520988184299,\n          -0.3616080116045524\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"QWG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0005003753127737,\n        \"min\": -2.660802498981584,\n        \"max\": 2.8257390273790977,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          -0.1081173689453796,\n          -1.060712948686669,\n          0.6454747043228094\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FDJ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000500375312774,\n        \"min\": -2.6204660364684953,\n        \"max\": 2.940974438292232,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          0.4185386031864608,\n          -0.8497069652008912,\n          -2.5498213156881664\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PJF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0005003753127735,\n        \"min\": -2.6744652897720127,\n        \"max\": 2.4701088805242493,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          0.49533791330152793,\n          -1.8392486714127034,\n          -0.9045163698230286\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HQE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0005003753127735,\n        \"min\": -2.7013608425848443,\n        \"max\": 2.4777335068709863,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          -0.4078671888285603,\n          0.9323937672052752,\n          -0.422001648049673\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NXJ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0005003753127732,\n        \"min\": -3.542140064466624,\n        \"max\": 2.6024764661358253,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          0.40697451922755945,\n          -0.9287136944022932,\n          1.0896815016660177\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "df_feat = pd.DataFrame(scaled_features,columns=df.columns[:-1])\n",
        "df_feat.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x9pZ0GvD0yBX"
      },
      "source": [
        "Split the data into a training set and a testing set"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ciK45CXJ0yBY"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NeAcH8zX0yBY"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(scaled_features,df['TARGET CLASS'],\n",
        "                                                    test_size=0.30)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nwQZM4bG0yBY"
      },
      "source": [
        "Buid a model using k=1\n",
        "\n",
        "Remember that wwe are building a model to predict whether someone will TARGET CLASS or not."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SyPxrv-X0yBY"
      },
      "outputs": [],
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "l8C5EWuQ0yBY"
      },
      "outputs": [],
      "source": [
        "knn = KNeighborsClassifier(n_neighbors=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "zGcRBXQs0yBY",
        "outputId": "6f85cee5-8045-4c54-a767-a4d4e12586cd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KNeighborsClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(n_neighbors=1)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "knn.fit(X_train,y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZupJoJ7k0yBY"
      },
      "outputs": [],
      "source": [
        "pred = knn.predict(X_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vdEnu1zd0yBY"
      },
      "source": [
        "Evaluate the KNN model."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pAc70DSb0yBZ"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import classification_report,confusion_matrix, accuracy_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1GnvgLee0yBZ",
        "outputId": "5ad47716-cf09-43ef-a5e2-ab9fe2ea91c9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[127  14]\n",
            " [ 12 147]]\n"
          ]
        }
      ],
      "source": [
        "print(confusion_matrix(y_test,pred))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pEUELeBM0yBZ",
        "outputId": "d623f817-928b-4535-8667-cde9e3f0abd1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.90      0.91       141\n",
            "           1       0.91      0.92      0.92       159\n",
            "\n",
            "    accuracy                           0.91       300\n",
            "   macro avg       0.91      0.91      0.91       300\n",
            "weighted avg       0.91      0.91      0.91       300\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print(classification_report(y_test,pred))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wm7hAWJO0yBZ"
      },
      "source": [
        "Choose a K value. Create a method to pick a good value of K."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-l8PGAd30yBZ"
      },
      "outputs": [],
      "source": [
        "error_rate = []\n",
        "\n",
        "\n",
        "for i in range(1,40):\n",
        "\n",
        "    knn = KNeighborsClassifier(n_neighbors=i)\n",
        "    knn.fit(X_train,y_train)\n",
        "    pred_i = knn.predict(X_test)\n",
        "    error_rate.append(np.mean(pred_i != y_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create a visualization to compare the error rate and k value"
      ],
      "metadata": {
        "id": "FadJP88w3i2O"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "id": "IfdFFvp10yBZ",
        "outputId": "19afd9f1-6647-4d14-de9d-a325355770e4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Error Rate')"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "plt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n",
        "         markerfacecolor='red', markersize=10)\n",
        "plt.title('Error Rate vs. K Value')\n",
        "plt.xlabel('K')\n",
        "plt.ylabel('Error Rate')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QCkq2Z1O0yBZ"
      },
      "source": [
        "**Interpret the result of the graph**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jkn9dTwq0yBZ"
      },
      "source": [
        "Answer:\n",
        "The Interpretation of the graph shows the relationship of K values (0-40) in our KNN model to the error rate (rate we will get the wrong classification). The value of K value we inputted will depend on our error rate, **The error rate is at its peak when our K value is 0, while the error rate will be at its lowest when our K value is 15**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LKMGjcRd0yBa"
      },
      "source": [
        "Compare the classification report of K=1 and K=23"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zYBsoX5z0yBa",
        "outputId": "65a8eb30-376b-486f-fcca-a30ad6beeed5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "WITH K=1\n",
            "\n",
            "\n",
            "[[127  14]\n",
            " [ 12 147]]\n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.90      0.91       141\n",
            "           1       0.91      0.92      0.92       159\n",
            "\n",
            "    accuracy                           0.91       300\n",
            "   macro avg       0.91      0.91      0.91       300\n",
            "weighted avg       0.91      0.91      0.91       300\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# K = 1\n",
        "knn = KNeighborsClassifier(n_neighbors=1)\n",
        "\n",
        "knn.fit(X_train,y_train)\n",
        "pred = knn.predict(X_test)\n",
        "\n",
        "print('WITH K=1')\n",
        "print('\\n')\n",
        "print(confusion_matrix(y_test,pred))\n",
        "print('\\n')\n",
        "print(classification_report(y_test,pred))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "97DnFlGX0yBa",
        "outputId": "a5d69115-9611-48fd-f6c0-8b150dafcfb5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "WITH K=23\n",
            "\n",
            "\n",
            "[[130  11]\n",
            " [  8 151]]\n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.94      0.92      0.93       141\n",
            "           1       0.93      0.95      0.94       159\n",
            "\n",
            "    accuracy                           0.94       300\n",
            "   macro avg       0.94      0.94      0.94       300\n",
            "weighted avg       0.94      0.94      0.94       300\n",
            "\n"
          ]
        }
      ],
      "source": [
        "#K = 23\n",
        "knn = KNeighborsClassifier(n_neighbors=23)\n",
        "\n",
        "knn.fit(X_train,y_train)\n",
        "pred = knn.predict(X_test)\n",
        "\n",
        "print('WITH K=23')\n",
        "print('\\n')\n",
        "print(confusion_matrix(y_test,pred))\n",
        "print('\\n')\n",
        "print(classification_report(y_test,pred))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fN-0gnxX0yBa"
      },
      "source": [
        "Interpret the result of the graph."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fh9yKB7G0yBa"
      },
      "source": [
        "My Interpretation on the result of the performance of the model with a k value of 13 is that it has 19 misclassified data points (wrong classification) a pretty high number misclassification but majority are classified correctly, the model has got more misclassification on TN compared to FN. We can also tell the performance of the model that it has performed well because of having a high value of precision and recall. I observed that 0 classification performed well compared to 1 in precision but performed pretty bad compared to 1 in recall"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E-MHrpDA0yBb"
      },
      "source": [
        "Fit the K-nearest neighbors model again with `n_neighbors=3` but this time use distance for the weights. Calculate the accuracy using the function you created above."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nFR7noXA0yBb",
        "outputId": "561945a9-18a3-4c35-8d5e-40d82a996cda"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9333333333333333\n"
          ]
        }
      ],
      "source": [
        "knn = KNeighborsClassifier(n_neighbors=3, weights='distance')\n",
        "\n",
        "knn = knn.fit(X_train, y_train)\n",
        "\n",
        "y_pred = knn.predict(X_test)\n",
        "\n",
        "print(accuracy_score(y_test, y_pred))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TNq91WGn0yBb"
      },
      "source": [
        "Fit another K-nearest neighbors model. This time use uniform weights but set the power parameter for the Minkowski distance metric to be 1 (`p=1`) i.e. Manhattan Distance."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZEGJjAOT0yBb",
        "outputId": "9125c972-729b-417e-9857-0da1532aeba5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9166666666666666\n"
          ]
        }
      ],
      "source": [
        "knn = KNeighborsClassifier(n_neighbors=5, p=1)\n",
        "\n",
        "knn = knn.fit(X_train, y_train)\n",
        "\n",
        "y_pred = knn.predict(X_test)\n",
        "\n",
        "print(accuracy_score(y_test, y_pred))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5eHIA1gv0yBb"
      },
      "source": [
        "Fit a K-nearest neighbors model using values of `k` (`n_neighbors`) ranging from 1 to 20. Use uniform weights (the default). The coefficient for the Minkowski distance (`p`) can be set to either 1 or 2--just be consistent. Store the accuracy and the value of `k` used from each of these fits in a list or dictionary.\n",
        "Plot (or view the table of) the `accuracy` vs `k`. What do you notice happens when `k=1`?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1dWeXEKj0yBc"
      },
      "outputs": [],
      "source": [
        "# Fit the K-nearest neighbors model with different values of k\n",
        "# Store the accuracy measurement for each k\n",
        "\n",
        "score_list = list()\n",
        "\n",
        "for k in range(1, 30):\n",
        "\n",
        "    knn = KNeighborsClassifier(n_neighbors=k)\n",
        "    knn = knn.fit(X_train, y_train)\n",
        "\n",
        "    y_pred = knn.predict(X_test)\n",
        "    score = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    score_list.append((k, score))\n",
        "\n",
        "score_df = pd.DataFrame(score_list, columns=['k', 'accuracy'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A9zgRGyX0yBc"
      },
      "outputs": [],
      "source": [
        "# Import libraries to make the plot\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "id": "pvJ8x3K70yBc",
        "outputId": "7f9f6d1b-5af2-4743-ae3c-cfbb08e9e891"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.set_context('talk')\n",
        "sns.set_style('ticks')\n",
        "sns.set_palette('dark')\n",
        "\n",
        "ax = score_df.set_index('k').plot()\n",
        "\n",
        "ax.set(xlabel='k', ylabel='accuracy')\n",
        "ax.set_xticks(range(1, 30));"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Supplementary Activity\n"
      ],
      "metadata": {
        "id": "mBGPXSeMJup7"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pHrk4PXM0yBc"
      },
      "source": [
        "Supplementary Activity:\n",
        "* Choose your own dataset\n",
        "* Import the dataset\n",
        "* Determine the number of datapoints, columns and data types\n",
        "* Remove unneccesary columns\n",
        "* Do data cleaning such as removing empty values(NaN), replacing missing data .\n",
        "* Standardize the variables.\n",
        "* Perform descriptive statistics such as mean, median and mode\n",
        "* Perform data visualization\n",
        "* Build the model using K Nearest Neighbor. Use k value from 1 to 50.\n",
        "* Evaluate the model using classification report, accuracy , confusion matrix and roc_auc_score\n",
        "* Compare the model using their accuracy report.\n",
        "* Create a graph to compare the accuracy based from eah k values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "lMdlMNiU0yBc",
        "outputId": "0de17b5c-7795-44c3-cef0-364974a14732"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n",
              "0                5.1               3.5                1.4               0.2\n",
              "1                4.9               3.0                1.4               0.2\n",
              "2                4.7               3.2                1.3               0.2\n",
              "3                4.6               3.1                1.5               0.2\n",
              "4                5.0               3.6                1.4               0.2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d07f020c-6eba-410e-9f34-bad42d08626a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal length (cm)</th>\n",
              "      <th>sepal width (cm)</th>\n",
              "      <th>petal length (cm)</th>\n",
              "      <th>petal width (cm)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d07f020c-6eba-410e-9f34-bad42d08626a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d07f020c-6eba-410e-9f34-bad42d08626a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d07f020c-6eba-410e-9f34-bad42d08626a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-af9111cc-8af1-4544-9833-786fc016cb9a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-af9111cc-8af1-4544-9833-786fc016cb9a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-af9111cc-8af1-4544-9833-786fc016cb9a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "irisfeat",
              "summary": "{\n  \"name\": \"irisfeat\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8280661279778629,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.435866284936698,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7652982332594667,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7622376689603465,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "#importing the dataset\n",
        "from sklearn.datasets import load_iris\n",
        "irisfeat = pd.DataFrame(data=load_iris().data, columns=load_iris().feature_names)\n",
        "irisfeat.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "iris = load_iris()"
      ],
      "metadata": {
        "id": "6oZDOp_JPp2X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "iristarget = pd.DataFrame(data=load_iris().target, columns=['target'])\n",
        "irisdf = pd.concat([irisfeat, iristarget], axis=1)\n",
        "irisdf.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "KR8hC9TUJI-2",
        "outputId": "91da9bb9-688a-4ab0-a0c0-bc6df4a333c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n",
              "0                5.1               3.5                1.4               0.2   \n",
              "1                4.9               3.0                1.4               0.2   \n",
              "2                4.7               3.2                1.3               0.2   \n",
              "3                4.6               3.1                1.5               0.2   \n",
              "4                5.0               3.6                1.4               0.2   \n",
              "\n",
              "   target  \n",
              "0       0  \n",
              "1       0  \n",
              "2       0  \n",
              "3       0  \n",
              "4       0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f117112b-5bd4-4eb6-abe6-a29ac4e28086\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal length (cm)</th>\n",
              "      <th>sepal width (cm)</th>\n",
              "      <th>petal length (cm)</th>\n",
              "      <th>petal width (cm)</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f117112b-5bd4-4eb6-abe6-a29ac4e28086')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f117112b-5bd4-4eb6-abe6-a29ac4e28086 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f117112b-5bd4-4eb6-abe6-a29ac4e28086');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-771aecba-f5c5-4e52-bf31-379f441f45ca\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-771aecba-f5c5-4e52-bf31-379f441f45ca')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-771aecba-f5c5-4e52-bf31-379f441f45ca button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "irisdf",
              "summary": "{\n  \"name\": \"irisdf\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8280661279778629,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.435866284936698,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7652982332594667,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7622376689603465,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Determining the number of datapoints, columns and data types\n",
        "irisdf.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sryf9nnWHmX5",
        "outputId": "5c4aab4f-8bf5-459d-800e-bc309b41fff1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 150 entries, 0 to 149\n",
            "Data columns (total 5 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   sepal length (cm)  150 non-null    float64\n",
            " 1   sepal width (cm)   150 non-null    float64\n",
            " 2   petal length (cm)  150 non-null    float64\n",
            " 3   petal width (cm)   150 non-null    float64\n",
            " 4   target             150 non-null    int64  \n",
            "dtypes: float64(4), int64(1)\n",
            "memory usage: 6.0 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Data cleaning\n",
        "irisdf.isna().sum()\n",
        "# there are no null values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "8emrGv0fKNaJ",
        "outputId": "6035ae2b-6eb4-4dc2-84c6-882e6908bf89"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sepal length (cm)    0\n",
              "sepal width (cm)     0\n",
              "petal length (cm)    0\n",
              "petal width (cm)     0\n",
              "target               0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>sepal length (cm)</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sepal width (cm)</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>petal length (cm)</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>petal width (cm)</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>target</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Standardizing the variables\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "\n",
        "\n",
        "irisfeat_scaled = pd.DataFrame(scaler.fit_transform(irisfeat), columns=irisfeat.columns)\n",
        "irisfeat_scaled.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ZgeIaE4pLkq1",
        "outputId": "b0c2e40f-75a5-4392-eea3-98b40d70ac76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n",
              "0          -0.900681          1.019004          -1.340227         -1.315444\n",
              "1          -1.143017         -0.131979          -1.340227         -1.315444\n",
              "2          -1.385353          0.328414          -1.397064         -1.315444\n",
              "3          -1.506521          0.098217          -1.283389         -1.315444\n",
              "4          -1.021849          1.249201          -1.340227         -1.315444"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4451e1f7-7d28-4159-ada3-37218f0a7075\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal length (cm)</th>\n",
              "      <th>sepal width (cm)</th>\n",
              "      <th>petal length (cm)</th>\n",
              "      <th>petal width (cm)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.900681</td>\n",
              "      <td>1.019004</td>\n",
              "      <td>-1.340227</td>\n",
              "      <td>-1.315444</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-1.143017</td>\n",
              "      <td>-0.131979</td>\n",
              "      <td>-1.340227</td>\n",
              "      <td>-1.315444</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-1.385353</td>\n",
              "      <td>0.328414</td>\n",
              "      <td>-1.397064</td>\n",
              "      <td>-1.315444</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-1.506521</td>\n",
              "      <td>0.098217</td>\n",
              "      <td>-1.283389</td>\n",
              "      <td>-1.315444</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.021849</td>\n",
              "      <td>1.249201</td>\n",
              "      <td>-1.340227</td>\n",
              "      <td>-1.315444</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4451e1f7-7d28-4159-ada3-37218f0a7075')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4451e1f7-7d28-4159-ada3-37218f0a7075 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4451e1f7-7d28-4159-ada3-37218f0a7075');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c1bff5b3-4cb4-4f4c-acef-c682fb3ea6ee\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c1bff5b3-4cb4-4f4c-acef-c682fb3ea6ee')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c1bff5b3-4cb4-4f4c-acef-c682fb3ea6ee button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "irisfeat_scaled",
              "summary": "{\n  \"name\": \"irisfeat_scaled\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0033500931359765,\n        \"min\": -1.87002413384702,\n        \"max\": 2.492019202124427,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          0.4321654045823549,\n          -1.6276883929597172,\n          -0.29484181807955345\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.003350093135976,\n        \"min\": -2.43394714190809,\n        \"max\": 3.0907752482994253,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          -1.7433568431321513,\n          2.169988183264839,\n          1.0190043519716065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.003350093135977,\n        \"min\": -1.567576234277176,\n        \"max\": 1.7858319536254093,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          1.672157099798203,\n          0.023871719303711698,\n          -0.03296570760989124\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0033500931359767,\n        \"min\": -1.4470764792980415,\n        \"max\": 1.712095943669179,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          -1.3154442950077407,\n          0.0008775478952676988,\n          0.13250973218556866\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "irisdf_scaled = pd.concat([irisfeat_scaled, iristarget], axis=1)\n",
        "\n",
        "irisdf_scaled.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Qj7Ozm9TOOOH",
        "outputId": "e8c522ba-e29c-4e81-ba9f-aa3e5ebce73c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n",
              "0          -0.900681          1.019004          -1.340227         -1.315444   \n",
              "1          -1.143017         -0.131979          -1.340227         -1.315444   \n",
              "2          -1.385353          0.328414          -1.397064         -1.315444   \n",
              "3          -1.506521          0.098217          -1.283389         -1.315444   \n",
              "4          -1.021849          1.249201          -1.340227         -1.315444   \n",
              "\n",
              "   target  \n",
              "0       0  \n",
              "1       0  \n",
              "2       0  \n",
              "3       0  \n",
              "4       0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-90a912be-b9ec-4e33-9cbb-0e16eb00f389\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal length (cm)</th>\n",
              "      <th>sepal width (cm)</th>\n",
              "      <th>petal length (cm)</th>\n",
              "      <th>petal width (cm)</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.900681</td>\n",
              "      <td>1.019004</td>\n",
              "      <td>-1.340227</td>\n",
              "      <td>-1.315444</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-1.143017</td>\n",
              "      <td>-0.131979</td>\n",
              "      <td>-1.340227</td>\n",
              "      <td>-1.315444</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-1.385353</td>\n",
              "      <td>0.328414</td>\n",
              "      <td>-1.397064</td>\n",
              "      <td>-1.315444</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-1.506521</td>\n",
              "      <td>0.098217</td>\n",
              "      <td>-1.283389</td>\n",
              "      <td>-1.315444</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.021849</td>\n",
              "      <td>1.249201</td>\n",
              "      <td>-1.340227</td>\n",
              "      <td>-1.315444</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-90a912be-b9ec-4e33-9cbb-0e16eb00f389')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-90a912be-b9ec-4e33-9cbb-0e16eb00f389 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-90a912be-b9ec-4e33-9cbb-0e16eb00f389');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ca17ed5a-e3a6-4175-a264-dd7c6bc0d20a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ca17ed5a-e3a6-4175-a264-dd7c6bc0d20a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ca17ed5a-e3a6-4175-a264-dd7c6bc0d20a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "irisdf_scaled",
              "summary": "{\n  \"name\": \"irisdf_scaled\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0033500931359765,\n        \"min\": -1.87002413384702,\n        \"max\": 2.492019202124427,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          0.4321654045823549,\n          -1.6276883929597172,\n          -0.29484181807955345\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.003350093135976,\n        \"min\": -2.43394714190809,\n        \"max\": 3.0907752482994253,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          -1.7433568431321513,\n          2.169988183264839,\n          1.0190043519716065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.003350093135977,\n        \"min\": -1.567576234277176,\n        \"max\": 1.7858319536254093,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          1.672157099798203,\n          0.023871719303711698,\n          -0.03296570760989124\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0033500931359767,\n        \"min\": -1.4470764792980415,\n        \"max\": 1.712095943669179,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          -1.3154442950077407,\n          0.0008775478952676988,\n          0.13250973218556866\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Performing descriptive statistics such as mean, median and mode\n",
        "irisdesc = irisdf.describe()"
      ],
      "metadata": {
        "id": "-kWzSaUwctk2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "irismode = irisdf.mode().loc[0]"
      ],
      "metadata": {
        "id": "ZPf6KQwvc4lu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "irismode = pd.DataFrame(irismode.rename('mode'))"
      ],
      "metadata": {
        "id": "839q8JCjc8H1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pd.concat([irisdesc,irismode.transpose()],axis=0).loc[['mean','50%','mode']].rename(index={'50%':'median'})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "lEIao7uydBCV",
        "outputId": "eaba0b7d-0792-4999-8e67-1762dd138d81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        sepal length (cm)  sepal width (cm)  petal length (cm)  \\\n",
              "mean             5.843333          3.057333              3.758   \n",
              "median           5.800000          3.000000              4.350   \n",
              "mode             5.000000          3.000000              1.400   \n",
              "\n",
              "        petal width (cm)  target  \n",
              "mean            1.199333     1.0  \n",
              "median          1.300000     1.0  \n",
              "mode            0.200000     0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4ab1107e-4388-4ae2-922c-577403060cdc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal length (cm)</th>\n",
              "      <th>sepal width (cm)</th>\n",
              "      <th>petal length (cm)</th>\n",
              "      <th>petal width (cm)</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5.843333</td>\n",
              "      <td>3.057333</td>\n",
              "      <td>3.758</td>\n",
              "      <td>1.199333</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>median</th>\n",
              "      <td>5.800000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.350</td>\n",
              "      <td>1.300000</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mode</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.400</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ab1107e-4388-4ae2-922c-577403060cdc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4ab1107e-4388-4ae2-922c-577403060cdc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4ab1107e-4388-4ae2-922c-577403060cdc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a64ef414-a74a-476a-81ee-d0c319d0f9c6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a64ef414-a74a-476a-81ee-d0c319d0f9c6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a64ef414-a74a-476a-81ee-d0c319d0f9c6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4748840014306808,\n        \"min\": 5.0,\n        \"max\": 5.843333333333334,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          5.843333333333334,\n          5.8,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03310141543353874,\n        \"min\": 3.0,\n        \"max\": 3.0573333333333337,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3.0,\n          3.0573333333333337\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5606156904674942,\n        \"min\": 1.4,\n        \"max\": 4.35,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3.7580000000000005,\n          4.35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6081119536303724,\n        \"min\": 0.2,\n        \"max\": 1.3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.1993333333333336,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5773502691896258,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# data visualization\n",
        "plt.scatter(irisdf_scaled['sepal length (cm)'], irisdf_scaled['sepal width (cm)'], c=iris.target)\n",
        "plt.xlabel('sepal length (cm)')\n",
        "plt.ylabel('sepal width (cm)')\n",
        "plt.legend(scatter.legend_elements()[0], iris.target_names, loc=\"upper right\", title=\"Classes\",fontsize=10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 493
        },
        "id": "CSsT1A-IP_Y7",
        "outputId": "8592d8d4-301a-41d0-c618-df034dc4d1a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7cdf5f28dcc0>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(irisdf_scaled['petal length (cm)'], irisdf_scaled['petal width (cm)'], c=iris.target)\n",
        "plt.xlabel('petal length (cm)')\n",
        "plt.ylabel('petal width (cm)')\n",
        "plt.legend(scatter.legend_elements()[0], iris.target_names, loc=\"lower right\", title=\"Classes\",fontsize=10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 493
        },
        "id": "3KqeuSzAUZlk",
        "outputId": "e3e1620f-6c39-4858-c71a-4d0541befbe4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7cdf63050250>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# building a KNN model from K values 0 to 50\n",
        "# and comparing their accuracy report\n",
        "\n",
        "from sklearn.metrics import roc_auc_score\n",
        "\n",
        "X_itrain, X_itest, y_itrain, y_itest = train_test_split(irisfeat_scaled, iristarget, test_size=0.30)\n",
        "iKNN_accuracies = []\n",
        "iKNN_classificationReports = []\n",
        "iKNN_confusionMatrices = []\n",
        "iKNN_roc_auc_scores = []\n",
        "\n",
        "for k in range(1, 51):\n",
        "    knn = KNeighborsClassifier(n_neighbors=k)\n",
        "    knn.fit(X_itrain, y_itrain)\n",
        "    y_pred = knn.predict(X_itest)\n",
        "    y_pred_proba = knn.predict_proba(X_itest) # to get the roc auc score\n",
        "    iKNN_accuracies.append(accuracy_score(y_itest, y_pred))\n",
        "    iKNN_confusionMatrices.append([k, confusion_matrix(y_itest, y_pred)])\n",
        "    print('classification rerport of k value:', k , '\\n', classification_report(y_itest, y_pred))\n",
        "    iKNN_roc_auc_scores.append(roc_auc_score(y_itest, y_pred_proba, multi_class = 'ovr'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5oh2n_ITV7bR",
        "outputId": "2ca34c26-7b6c-4f08-8481-52ff71995faa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "classification rerport of k value: 1 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.88      0.88      0.88        16\n",
            "           2       0.88      0.88      0.88        17\n",
            "\n",
            "    accuracy                           0.91        45\n",
            "   macro avg       0.92      0.92      0.92        45\n",
            "weighted avg       0.91      0.91      0.91        45\n",
            "\n",
            "classification rerport of k value: 2 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.88      0.94      0.91        16\n",
            "           2       0.94      0.88      0.91        17\n",
            "\n",
            "    accuracy                           0.93        45\n",
            "   macro avg       0.94      0.94      0.94        45\n",
            "weighted avg       0.93      0.93      0.93        45\n",
            "\n",
            "classification rerport of k value: 3 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.88      0.94      0.91        16\n",
            "           2       0.94      0.88      0.91        17\n",
            "\n",
            "    accuracy                           0.93        45\n",
            "   macro avg       0.94      0.94      0.94        45\n",
            "weighted avg       0.93      0.93      0.93        45\n",
            "\n",
            "classification rerport of k value: 4 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.83      0.94      0.88        16\n",
            "           2       0.93      0.82      0.88        17\n",
            "\n",
            "    accuracy                           0.91        45\n",
            "   macro avg       0.92      0.92      0.92        45\n",
            "weighted avg       0.92      0.91      0.91        45\n",
            "\n",
            "classification rerport of k value: 5 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.88      0.94      0.91        16\n",
            "           2       0.94      0.88      0.91        17\n",
            "\n",
            "    accuracy                           0.93        45\n",
            "   macro avg       0.94      0.94      0.94        45\n",
            "weighted avg       0.93      0.93      0.93        45\n",
            "\n",
            "classification rerport of k value: 6 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.88      0.94      0.91        16\n",
            "           2       0.94      0.88      0.91        17\n",
            "\n",
            "    accuracy                           0.93        45\n",
            "   macro avg       0.94      0.94      0.94        45\n",
            "weighted avg       0.93      0.93      0.93        45\n",
            "\n",
            "classification rerport of k value: 7 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.88      0.94      0.91        16\n",
            "           2       0.94      0.88      0.91        17\n",
            "\n",
            "    accuracy                           0.93        45\n",
            "   macro avg       0.94      0.94      0.94        45\n",
            "weighted avg       0.93      0.93      0.93        45\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "classification rerport of k value: 8 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.88      0.94      0.91        16\n",
            "           2       0.94      0.88      0.91        17\n",
            "\n",
            "    accuracy                           0.93        45\n",
            "   macro avg       0.94      0.94      0.94        45\n",
            "weighted avg       0.93      0.93      0.93        45\n",
            "\n",
            "classification rerport of k value: 9 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.88      0.94      0.91        16\n",
            "           2       0.94      0.88      0.91        17\n",
            "\n",
            "    accuracy                           0.93        45\n",
            "   macro avg       0.94      0.94      0.94        45\n",
            "weighted avg       0.93      0.93      0.93        45\n",
            "\n",
            "classification rerport of k value: 10 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.89      1.00      0.94        16\n",
            "           2       1.00      0.88      0.94        17\n",
            "\n",
            "    accuracy                           0.96        45\n",
            "   macro avg       0.96      0.96      0.96        45\n",
            "weighted avg       0.96      0.96      0.96        45\n",
            "\n",
            "classification rerport of k value: 11 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.88      0.94      0.91        16\n",
            "           2       0.94      0.88      0.91        17\n",
            "\n",
            "    accuracy                           0.93        45\n",
            "   macro avg       0.94      0.94      0.94        45\n",
            "weighted avg       0.93      0.93      0.93        45\n",
            "\n",
            "classification rerport of k value: 12 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.89      1.00      0.94        16\n",
            "           2       1.00      0.88      0.94        17\n",
            "\n",
            "    accuracy                           0.96        45\n",
            "   macro avg       0.96      0.96      0.96        45\n",
            "weighted avg       0.96      0.96      0.96        45\n",
            "\n",
            "classification rerport of k value: 13 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.88      0.94      0.91        16\n",
            "           2       0.94      0.88      0.91        17\n",
            "\n",
            "    accuracy                           0.93        45\n",
            "   macro avg       0.94      0.94      0.94        45\n",
            "weighted avg       0.93      0.93      0.93        45\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "classification rerport of k value: 14 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.84      1.00      0.91        16\n",
            "           2       1.00      0.82      0.90        17\n",
            "\n",
            "    accuracy                           0.93        45\n",
            "   macro avg       0.95      0.94      0.94        45\n",
            "weighted avg       0.94      0.93      0.93        45\n",
            "\n",
            "classification rerport of k value: 15 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.89      1.00      0.94        16\n",
            "           2       1.00      0.88      0.94        17\n",
            "\n",
            "    accuracy                           0.96        45\n",
            "   macro avg       0.96      0.96      0.96        45\n",
            "weighted avg       0.96      0.96      0.96        45\n",
            "\n",
            "classification rerport of k value: 16 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.89      1.00      0.94        16\n",
            "           2       1.00      0.88      0.94        17\n",
            "\n",
            "    accuracy                           0.96        45\n",
            "   macro avg       0.96      0.96      0.96        45\n",
            "weighted avg       0.96      0.96      0.96        45\n",
            "\n",
            "classification rerport of k value: 17 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.89      1.00      0.94        16\n",
            "           2       1.00      0.88      0.94        17\n",
            "\n",
            "    accuracy                           0.96        45\n",
            "   macro avg       0.96      0.96      0.96        45\n",
            "weighted avg       0.96      0.96      0.96        45\n",
            "\n",
            "classification rerport of k value: 18 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.84      1.00      0.91        16\n",
            "           2       1.00      0.82      0.90        17\n",
            "\n",
            "    accuracy                           0.93        45\n",
            "   macro avg       0.95      0.94      0.94        45\n",
            "weighted avg       0.94      0.93      0.93        45\n",
            "\n",
            "classification rerport of k value: 19 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.89      1.00      0.94        16\n",
            "           2       1.00      0.88      0.94        17\n",
            "\n",
            "    accuracy                           0.96        45\n",
            "   macro avg       0.96      0.96      0.96        45\n",
            "weighted avg       0.96      0.96      0.96        45\n",
            "\n",
            "classification rerport of k value: 20 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.89      1.00      0.94        16\n",
            "           2       1.00      0.88      0.94        17\n",
            "\n",
            "    accuracy                           0.96        45\n",
            "   macro avg       0.96      0.96      0.96        45\n",
            "weighted avg       0.96      0.96      0.96        45\n",
            "\n",
            "classification rerport of k value: 21 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.89      1.00      0.94        16\n",
            "           2       1.00      0.88      0.94        17\n",
            "\n",
            "    accuracy                           0.96        45\n",
            "   macro avg       0.96      0.96      0.96        45\n",
            "weighted avg       0.96      0.96      0.96        45\n",
            "\n",
            "classification rerport of k value: 22 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.84      1.00      0.91        16\n",
            "           2       1.00      0.82      0.90        17\n",
            "\n",
            "    accuracy                           0.93        45\n",
            "   macro avg       0.95      0.94      0.94        45\n",
            "weighted avg       0.94      0.93      0.93        45\n",
            "\n",
            "classification rerport of k value: 23 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.83      0.94      0.88        16\n",
            "           2       0.93      0.82      0.88        17\n",
            "\n",
            "    accuracy                           0.91        45\n",
            "   macro avg       0.92      0.92      0.92        45\n",
            "weighted avg       0.92      0.91      0.91        45\n",
            "\n",
            "classification rerport of k value: 24 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.83      0.94      0.88        16\n",
            "           2       0.93      0.82      0.88        17\n",
            "\n",
            "    accuracy                           0.91        45\n",
            "   macro avg       0.92      0.92      0.92        45\n",
            "weighted avg       0.92      0.91      0.91        45\n",
            "\n",
            "classification rerport of k value: 25 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.83      0.94      0.88        16\n",
            "           2       0.93      0.82      0.88        17\n",
            "\n",
            "    accuracy                           0.91        45\n",
            "   macro avg       0.92      0.92      0.92        45\n",
            "weighted avg       0.92      0.91      0.91        45\n",
            "\n",
            "classification rerport of k value: 26 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.83      0.94      0.88        16\n",
            "           2       0.93      0.82      0.88        17\n",
            "\n",
            "    accuracy                           0.91        45\n",
            "   macro avg       0.92      0.92      0.92        45\n",
            "weighted avg       0.92      0.91      0.91        45\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "classification rerport of k value: 27 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.83      0.94      0.88        16\n",
            "           2       0.93      0.82      0.88        17\n",
            "\n",
            "    accuracy                           0.91        45\n",
            "   macro avg       0.92      0.92      0.92        45\n",
            "weighted avg       0.92      0.91      0.91        45\n",
            "\n",
            "classification rerport of k value: 28 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.75      0.94      0.83        16\n",
            "           2       0.92      0.71      0.80        17\n",
            "\n",
            "    accuracy                           0.87        45\n",
            "   macro avg       0.89      0.88      0.88        45\n",
            "weighted avg       0.88      0.87      0.87        45\n",
            "\n",
            "classification rerport of k value: 29 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.75      0.94      0.83        16\n",
            "           2       0.92      0.71      0.80        17\n",
            "\n",
            "    accuracy                           0.87        45\n",
            "   macro avg       0.89      0.88      0.88        45\n",
            "weighted avg       0.88      0.87      0.87        45\n",
            "\n",
            "classification rerport of k value: 30 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.75      0.94      0.83        16\n",
            "           2       0.92      0.71      0.80        17\n",
            "\n",
            "    accuracy                           0.87        45\n",
            "   macro avg       0.89      0.88      0.88        45\n",
            "weighted avg       0.88      0.87      0.87        45\n",
            "\n",
            "classification rerport of k value: 31 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.79      0.94      0.86        16\n",
            "           2       0.93      0.76      0.84        17\n",
            "\n",
            "    accuracy                           0.89        45\n",
            "   macro avg       0.91      0.90      0.90        45\n",
            "weighted avg       0.90      0.89      0.89        45\n",
            "\n",
            "classification rerport of k value: 32 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.75      0.94      0.83        16\n",
            "           2       0.92      0.71      0.80        17\n",
            "\n",
            "    accuracy                           0.87        45\n",
            "   macro avg       0.89      0.88      0.88        45\n",
            "weighted avg       0.88      0.87      0.87        45\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "classification rerport of k value: 33 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.79      0.94      0.86        16\n",
            "           2       0.93      0.76      0.84        17\n",
            "\n",
            "    accuracy                           0.89        45\n",
            "   macro avg       0.91      0.90      0.90        45\n",
            "weighted avg       0.90      0.89      0.89        45\n",
            "\n",
            "classification rerport of k value: 34 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.75      0.94      0.83        16\n",
            "           2       0.92      0.71      0.80        17\n",
            "\n",
            "    accuracy                           0.87        45\n",
            "   macro avg       0.89      0.88      0.88        45\n",
            "weighted avg       0.88      0.87      0.87        45\n",
            "\n",
            "classification rerport of k value: 35 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.75      0.94      0.83        16\n",
            "           2       0.92      0.71      0.80        17\n",
            "\n",
            "    accuracy                           0.87        45\n",
            "   macro avg       0.89      0.88      0.88        45\n",
            "weighted avg       0.88      0.87      0.87        45\n",
            "\n",
            "classification rerport of k value: 36 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.71      0.94      0.81        16\n",
            "           2       0.92      0.65      0.76        17\n",
            "\n",
            "    accuracy                           0.84        45\n",
            "   macro avg       0.88      0.86      0.86        45\n",
            "weighted avg       0.87      0.84      0.84        45\n",
            "\n",
            "classification rerport of k value: 37 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.70      0.88      0.78        16\n",
            "           2       0.85      0.65      0.73        17\n",
            "\n",
            "    accuracy                           0.82        45\n",
            "   macro avg       0.85      0.84      0.84        45\n",
            "weighted avg       0.84      0.82      0.82        45\n",
            "\n",
            "classification rerport of k value: 38 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.71      0.94      0.81        16\n",
            "           2       0.92      0.65      0.76        17\n",
            "\n",
            "    accuracy                           0.84        45\n",
            "   macro avg       0.88      0.86      0.86        45\n",
            "weighted avg       0.87      0.84      0.84        45\n",
            "\n",
            "classification rerport of k value: 39 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.74      0.88      0.80        16\n",
            "           2       0.86      0.71      0.77        17\n",
            "\n",
            "    accuracy                           0.84        45\n",
            "   macro avg       0.86      0.86      0.86        45\n",
            "weighted avg       0.85      0.84      0.84        45\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "classification rerport of k value: 40 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.74      0.88      0.80        16\n",
            "           2       0.86      0.71      0.77        17\n",
            "\n",
            "    accuracy                           0.84        45\n",
            "   macro avg       0.86      0.86      0.86        45\n",
            "weighted avg       0.85      0.84      0.84        45\n",
            "\n",
            "classification rerport of k value: 41 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.74      0.88      0.80        16\n",
            "           2       0.86      0.71      0.77        17\n",
            "\n",
            "    accuracy                           0.84        45\n",
            "   macro avg       0.86      0.86      0.86        45\n",
            "weighted avg       0.85      0.84      0.84        45\n",
            "\n",
            "classification rerport of k value: 42 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.70      0.88      0.78        16\n",
            "           2       0.85      0.65      0.73        17\n",
            "\n",
            "    accuracy                           0.82        45\n",
            "   macro avg       0.85      0.84      0.84        45\n",
            "weighted avg       0.84      0.82      0.82        45\n",
            "\n",
            "classification rerport of k value: 43 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.68      0.81      0.74        16\n",
            "           2       0.79      0.65      0.71        17\n",
            "\n",
            "    accuracy                           0.80        45\n",
            "   macro avg       0.82      0.82      0.82        45\n",
            "weighted avg       0.81      0.80      0.80        45\n",
            "\n",
            "classification rerport of k value: 44 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.68      0.81      0.74        16\n",
            "           2       0.79      0.65      0.71        17\n",
            "\n",
            "    accuracy                           0.80        45\n",
            "   macro avg       0.82      0.82      0.82        45\n",
            "weighted avg       0.81      0.80      0.80        45\n",
            "\n",
            "classification rerport of k value: 45 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.72      0.81      0.76        16\n",
            "           2       0.80      0.71      0.75        17\n",
            "\n",
            "    accuracy                           0.82        45\n",
            "   macro avg       0.84      0.84      0.84        45\n",
            "weighted avg       0.83      0.82      0.82        45\n",
            "\n",
            "classification rerport of k value: 46 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.74      0.88      0.80        16\n",
            "           2       0.86      0.71      0.77        17\n",
            "\n",
            "    accuracy                           0.84        45\n",
            "   macro avg       0.86      0.86      0.86        45\n",
            "weighted avg       0.85      0.84      0.84        45\n",
            "\n",
            "classification rerport of k value: 47 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.72      0.81      0.76        16\n",
            "           2       0.80      0.71      0.75        17\n",
            "\n",
            "    accuracy                           0.82        45\n",
            "   macro avg       0.84      0.84      0.84        45\n",
            "weighted avg       0.83      0.82      0.82        45\n",
            "\n",
            "classification rerport of k value: 48 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.74      0.88      0.80        16\n",
            "           2       0.86      0.71      0.77        17\n",
            "\n",
            "    accuracy                           0.84        45\n",
            "   macro avg       0.86      0.86      0.86        45\n",
            "weighted avg       0.85      0.84      0.84        45\n",
            "\n",
            "classification rerport of k value: 49 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.72      0.81      0.76        16\n",
            "           2       0.80      0.71      0.75        17\n",
            "\n",
            "    accuracy                           0.82        45\n",
            "   macro avg       0.84      0.84      0.84        45\n",
            "weighted avg       0.83      0.82      0.82        45\n",
            "\n",
            "classification rerport of k value: 50 \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        12\n",
            "           1       0.70      0.88      0.78        16\n",
            "           2       0.85      0.65      0.73        17\n",
            "\n",
            "    accuracy                           0.82        45\n",
            "   macro avg       0.85      0.84      0.84        45\n",
            "weighted avg       0.84      0.82      0.82        45\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:238: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  return self._fit(X, y)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# comparing the confusion matrices of KNN model\n",
        "for i in range(len(iKNN_confusionMatrices)):\n",
        "  confusion_matrix = iKNN_confusionMatrices[i][1]\n",
        "  print('confusion matrix of k value:', iKNN_confusionMatrices[i][0])\n",
        "  print(confusion_matrix)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dypNySjOe9ww",
        "outputId": "5264d6e6-3025-4484-9dce-5424cadb134f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "confusion matrix of k value: 1\n",
            "[[12  0  0]\n",
            " [ 0 14  2]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 2\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 3\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 4\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  3 14]]\n",
            "confusion matrix of k value: 5\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 6\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 7\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 8\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 9\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 10\n",
            "[[12  0  0]\n",
            " [ 0 16  0]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 11\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 12\n",
            "[[12  0  0]\n",
            " [ 0 16  0]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 13\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 14\n",
            "[[12  0  0]\n",
            " [ 0 16  0]\n",
            " [ 0  3 14]]\n",
            "confusion matrix of k value: 15\n",
            "[[12  0  0]\n",
            " [ 0 16  0]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 16\n",
            "[[12  0  0]\n",
            " [ 0 16  0]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 17\n",
            "[[12  0  0]\n",
            " [ 0 16  0]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 18\n",
            "[[12  0  0]\n",
            " [ 0 16  0]\n",
            " [ 0  3 14]]\n",
            "confusion matrix of k value: 19\n",
            "[[12  0  0]\n",
            " [ 0 16  0]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 20\n",
            "[[12  0  0]\n",
            " [ 0 16  0]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 21\n",
            "[[12  0  0]\n",
            " [ 0 16  0]\n",
            " [ 0  2 15]]\n",
            "confusion matrix of k value: 22\n",
            "[[12  0  0]\n",
            " [ 0 16  0]\n",
            " [ 0  3 14]]\n",
            "confusion matrix of k value: 23\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  3 14]]\n",
            "confusion matrix of k value: 24\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  3 14]]\n",
            "confusion matrix of k value: 25\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  3 14]]\n",
            "confusion matrix of k value: 26\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  3 14]]\n",
            "confusion matrix of k value: 27\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  3 14]]\n",
            "confusion matrix of k value: 28\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 29\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 30\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 31\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  4 13]]\n",
            "confusion matrix of k value: 32\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 33\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  4 13]]\n",
            "confusion matrix of k value: 34\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 35\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 36\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  6 11]]\n",
            "confusion matrix of k value: 37\n",
            "[[12  0  0]\n",
            " [ 0 14  2]\n",
            " [ 0  6 11]]\n",
            "confusion matrix of k value: 38\n",
            "[[12  0  0]\n",
            " [ 0 15  1]\n",
            " [ 0  6 11]]\n",
            "confusion matrix of k value: 39\n",
            "[[12  0  0]\n",
            " [ 0 14  2]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 40\n",
            "[[12  0  0]\n",
            " [ 0 14  2]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 41\n",
            "[[12  0  0]\n",
            " [ 0 14  2]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 42\n",
            "[[12  0  0]\n",
            " [ 0 14  2]\n",
            " [ 0  6 11]]\n",
            "confusion matrix of k value: 43\n",
            "[[12  0  0]\n",
            " [ 0 13  3]\n",
            " [ 0  6 11]]\n",
            "confusion matrix of k value: 44\n",
            "[[12  0  0]\n",
            " [ 0 13  3]\n",
            " [ 0  6 11]]\n",
            "confusion matrix of k value: 45\n",
            "[[12  0  0]\n",
            " [ 0 13  3]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 46\n",
            "[[12  0  0]\n",
            " [ 0 14  2]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 47\n",
            "[[12  0  0]\n",
            " [ 0 13  3]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 48\n",
            "[[12  0  0]\n",
            " [ 0 14  2]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 49\n",
            "[[12  0  0]\n",
            " [ 0 13  3]\n",
            " [ 0  5 12]]\n",
            "confusion matrix of k value: 50\n",
            "[[12  0  0]\n",
            " [ 0 14  2]\n",
            " [ 0  6 11]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(15,6))\n",
        "plt.plot(range(1, 51), iKNN_accuracies, marker='o',\n",
        "         markerfacecolor='red')\n",
        "plt.xlabel('k value')\n",
        "plt.ylabel('accuracy')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 585
        },
        "id": "xeMIaLY7rm1y",
        "outputId": "541b9fa0-d29b-46f6-8f33-bfb6a8396b36"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'accuracy')"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nzIjErtF0yBc"
      },
      "source": [
        "Conclusion"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g6iaB1gT0yBc"
      },
      "source": [
        "In this activity we have used K Nearest Neighbor Algorithm in classification problem, I have learned that when we use KNN and inputting a number of K values is like we are **asking n of my closest friends (the K value) and ask them what their favorite food are and tallying with the most food that was mentioned will be one of my favorite food also**. Doing this activity, I concluded that **increasing the value K value in a KNN model will not also increase the accuracy (it will depend on the situation, because shown on the activity, even though we have a high value of k, there are instances that it gives a low accuracy score)** of our model unlike in polynomial regression as the degree increases the accuracy also increases <br> <br>\n",
        "\n",
        "\n",
        "In my supplementary activity the KNN model that performs the best are the KNN models that has a 10,12,15,16,17,19,20,21 k value because they have the high accuracy score that is almost .96 accuracy score, it also has a low number of misclassification from the confusion matrix of just 2, and all the k values mentioned earlier has a good precision and recall value"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}